//상속이 필요한 이유
//메시지
//텍스트
//이미지

#include <iostream>
#include <string>

using namespace std;

class Image {
public:
    operator string () {
        return "사진";
    }
};

class TextMessage {
public:
    TextMessage(int sendTime, string sendName, string text){
        this->sendTime = sendTime;
        this->sendName = sendName;
        this->text = text;
    }
    
    int GetSendTime() const {return sendTime;}
    string GetSendName() const {return sendName;}
    string GetText() const {return  text;}

private:
    int sendTime;
    string sendName;
    string text;
};

class ImageMessage {
public:
    ImageMessage(int sendTime, string sendName, Image *image){
        this->sendTime = sendTime;
        this->sendName = sendName;
        this->image = image; //Image에서 동적 할당 없어서 얕은 복사 ㅇㅋ
    }
    
    int GetSendTime() const {return sendTime;}
    string GetSendName() const {return sendName;}
    Image *Getimage() const {return image;}
    
private:
    int sendTime;
    string sendName;
    Image *image; //용량이 커질 수도 있으니까 포인터로 보다 간결 처리
};

int main() {
    // A: "ㅎㅇ"
    // A: "A 사진"
    
    Image *p_image = new Image();
    TextMessage *hello = new TextMessage(10, "A", "ㅎㅇ");
    ImageMessage *image = new ImageMessage(20, "A", p_image);
    
    cout << "보낸 시간 : " << hello->GetSendTime() << endl;
    cout << "보낸 사람 : " << hello->GetSendName() << endl;
    cout << " 내   용  : " << hello->GetText() << endl;
    cout << '\n' << endl;
    cout << "보낸 시간 : " << image->GetSendTime() << endl;
    cout << "보낸 사람 : " << image->GetSendName() << endl;
    cout << " 내   용  : " << (string)*image->Getimage() << endl;
    
    
    delete hello;
    delete image;
    delete p_image;
}
