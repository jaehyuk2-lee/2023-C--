#include <iostream>
#include <string.h>

using namespace std;

class String {
public:
	String() {
		cout << "String() : " << this << endl;
		strData=NULL;
		len=0;
	}
	String(const char *str) {
		cout << "String(const char*) : " << this << endl;
		len = strlen(str);
		alloc(len);
		strcpy(strData, str);
	}
	String(const String &rhs) {
		cout << "String(const String&) : " << this << endl;
		len=rhs.len;
		alloc(len);
		strcpy(strData, rhs.strData);
	}//복사 생성자

	~String() {
		cout << "~String() : " << this << endl;
		release();
		strData = NULL;
	}

	String &operator=(const String &rhs) {
	    cout << "String &operator=(const String&) : " << this << endl;
	    if(this != &rhs){
	        release();
	        len = rhs.len;
	        alloc(len);
	        strcpy(strData, rhs.strData);
	    }
	    return *this;
	}//복사 대입 연산자

	char* GetStrData() const {
		return strData;
	}
	int GetLen() const {
		return len;
	}
	void SetStrData(const char *str) {
		cout << "void SetStrData(const char *str) : " << this << ", " << str << endl;
		len = strlen(str);
		alloc(len);
		strcpy(strData, str);
	}

private:
	void alloc(int len) {
		strData = new char[len + 1];
		cout << "strData allocated : " << (void*)strData << endl;
	} //배열 할당인거지
	void release() {
		delete[] strData;
		if (strData) cout << "strData released : " << (void*)strData << endl;
	}

	char *strData;
	int len;
};

String getName() {
	cout << "===== 2 =====" << endl;
	String res("Doodle");
	cout << "===== 3 =====" << endl;
	return res;
}

int main() {
	String a;
	cout << "===== 1 =====" << endl;
	a = getName();
	cout << "===== 4 =====" << endl;
	
	String &&r = getName();
	//임시 객체는 r-value다
	//r-value 우변에만 올 수 있는 값 ex) 5 , x=3, 함수의 리턴 값, 임시객체 ...
}
