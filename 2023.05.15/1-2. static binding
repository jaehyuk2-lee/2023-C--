//static binding

#include <iostream>

using namespace std;

class Base {
public:
    void Print(){
        cout << "From Base" << endl;
    }
};

class Derived : public Base {
public:
    void Print(){
        cout << "From Derived" << endl;
    }
};

class Derived2 : public Base{
public:
    void Print(){
        cout << "From Derived2" << endl;
    }
};

// c++에서 타입이 달라도 부모 클래스 포인터가 자식 클래스의 변수를 가르킬 수 있다.
// 포인터의 소속을 판별하기 어려움 ~> 정적 바인딩 사용

int main() {
    Base *b = new Derived();
    b->Print(); //Base 포인터이므로 다른 객체를 가르키고 있을 때도 b->는 Base에 있는 멤버 출력 (정적 바인딩 : c++ 디폴트)
    b = new Derived2();
    b->Print();
    
    delete[] b;
}
