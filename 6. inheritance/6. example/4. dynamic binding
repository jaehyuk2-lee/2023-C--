#include <iostream>
#include <stdio.h>
#include <string>
using namespace std;

enum LogLevels {
	DEBUG,
	INFO,
	WARNING,
	ERROR,
	FATAL
};

const char* const LEVEL_HEADINGS[] = {
	"DEBUG", "INFO", "WARNING", "ERROR", "FATAL"
};

class Logger {
public:
    Logger(int minLevel) : minLevel(minLevel) {}
    virtual ~Logger() {}
	int GetMinLevel() const { return minLevel; }
	
    void Log(const string &s, int level) {
        if (level >= minLevel){
            doLog(s, level);
        }
    }
    
protected:
    virtual void doLog(const string &s, int level) = 0;
    
private:
    int minLevel;
};

class FileLogger : public Logger {
public:
	FileLogger(int minLevel, const string &fileName) : Logger(minLevel) {
		logFile = fopen(fileName.c_str(), "a");
	}
	~FileLogger() {
		fclose(logFile);
	}

protected:
    void doLog(const string &s, int level) {
        fprintf(logFile, "[%s] %s\n", LEVEL_HEADINGS[level], s.c_str());
    }

private:
	FILE *logFile;
};

class ConsoleLogger : public Logger {
public:
    ConsoleLogger(int minLevel) : Logger(minLevel){}
    
protected:
    void doLog(const string &s, int level) {
        printf("[%s] %s\n", LEVEL_HEADINGS[level], s.c_str());
    }
};

void TestLogger(Logger *l){
    l->Log("abc", LogLevels::ERROR);
	l->Log("def", LogLevels::INFO);
	l->Log("ghi", LogLevels::WARNING);
}

int main() {
	Logger *l = new ConsoleLogger(LogLevels::WARNING);
	TestLogger(l);
    
	l = new FileLogger(LogLevels::DEBUG, "log.txt");
	TestLogger(l);
	delete l;
}//89강 다른 답 
