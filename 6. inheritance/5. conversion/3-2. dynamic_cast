// 다형 클래스만 사용가능
#include <iostream>
#include <math.h>
using namespace std;

class Shape {
public:
    virtual double GetArea() = 0;
    virtual void Resize(double f) = 0;
};

const double PI = 3.141592;
class Circle : public Shape {
public:
    Circle(double r) : r(r) {}
    
    double GetArea() {
        return PI * r * r;
    }
    
    void Resize(double f) {
        r *= f;
    }
    
private:
    double r;
};

class Rectangle : public Shape {
public:
    Rectangle(double a, double b) : a(a), b(b){}
    
    double GetArea() {
        return a * b;
    }
    
    void Resize(double f) {
        a *= f;
        b *= f;
    }
    
    double GetDiag() const {
        return sqrt(a * a + b * b);
    }
    
private:
    double a, b;
};

int main() {
    Shape *shapes[] = {
        new Circle(1),
        new Rectangle(3, 4)
    };
    
    for (int i = 0; i < 2; i++){
        cout << "도형의 넓이 : " << shapes[i]->GetArea() << endl;
        Rectangle* r = dynamic_cast<Rectangle*>(shapes[i]); //Rectangle로 형변환을 시도해 성공하면 1 아니면 NULL 반환
        if(r) {
            cout << "도형의 대각선의 길이 : " << r->GetDiag() << endl;
        }
    }
    
    for (int i = 0; i < 2; i ++) {
        delete shapes[i];
    }
}
