#include <iostream>
#include <string>

using namespace std;

class Image {
public:
    operator string () {
        return "사진";
    }
};

class Message{
public:
    Message(int sendTime, string sendName){
        this->sendTime = sendTime;
        this->sendName = sendName;
    }
    
    int GetSendTime() const {return sendTime;}
    string GetSendName() const {return sendName;}
    
    virtual string GetContent() const {return "";}

private:
    int sendTime;
    string sendName;    
};

class TextMessage : public Message {
public:
    TextMessage(int sendTime, string sendName, string text)
    : Message(sendTime, sendName){
        this->text = text;
    }
    string GetText() const {return  text;}
    string GetContent() const {return text;}
    
private:
    string text;
};

class ImageMessage : public Message {
public:
    ImageMessage(int sendTime, string sendName, Image *image)
    : Message(sendTime,sendName) {
        this->image = image;
    }
    
    Image *Getimage() const {return image;}
    string GetContent() const {return (string)*image;}
    
private:
    Image *image;
};

void printMessage(const Message &m){
    cout << "보낸 시간 : " << m.GetSendTime() << endl;
    cout << "보낸 사람 : " << m.GetSendName() << endl;
    cout << "내     용 : " << m.GetContent() << endl;
    cout << "\n" << endl;
} // m이 가르키고 있는 class에 맞추어 반환

int main() {
    
    Image *p_image = new Image();
    
    Message *messages [] = {
        new TextMessage(10, "A", "ㅎㅇ"),
        new TextMessage(11, "A", "ㅇㅎ"),
        new TextMessage(12, "A", "ㅎㅇ"),
        new ImageMessage(20, "A", p_image)
    };

    for (Message *m : messages) {
        printMessage(*m);
    }

    for (Message *m : messages){
        delete m;
    }
    delete p_image;
}
